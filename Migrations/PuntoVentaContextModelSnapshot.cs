// <auto-generated />
using System;
using API_Punto_Venta.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Punto_Venta.Migrations
{
    [DbContext(typeof(PuntoVentaContext))]
    partial class PuntoVentaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_Punto_Venta.Models.Caja", b =>
                {
                    b.Property<int>("CajId")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_ID");

                    b.Property<int?>("CajBill100Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_100_DOL");

                    b.Property<int?>("CajBill10Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_10_DOL");

                    b.Property<int?>("CajBill1Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_1_DOL");

                    b.Property<int?>("CajBill20Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_20_DOL");

                    b.Property<int?>("CajBill2Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_2_DOL");

                    b.Property<int?>("CajBill50Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_50_DOL");

                    b.Property<int?>("CajBill5Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_BILL_5_DOL");

                    b.Property<string>("CajEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CAJ_ESTADO")
                        .IsFixedLength();

                    b.Property<DateTime?>("CajFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("CAJ_FECHA");

                    b.Property<int?>("CajMon10C")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_10_C");

                    b.Property<int?>("CajMon1C")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_1_C");

                    b.Property<int?>("CajMon1Dol")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_1_DOL");

                    b.Property<int?>("CajMon25C")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_25_C");

                    b.Property<int?>("CajMon50C")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_50_C");

                    b.Property<int?>("CajMon5C")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_MON_5_C");

                    b.Property<double?>("CajRegIngreso")
                        .HasColumnType("float")
                        .HasColumnName("CAJ_REG_INGRESO");

                    b.Property<double?>("CajRegSalida")
                        .HasColumnType("float")
                        .HasColumnName("CAJ_REG_SALIDA");

                    b.Property<double?>("CajTotal")
                        .HasColumnType("float")
                        .HasColumnName("CAJ_TOTAL");

                    b.HasKey("CajId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CajId"), false);

                    b.ToTable("CAJA", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.CategoriaProducto", b =>
                {
                    b.Property<int>("CaProId")
                        .HasColumnType("int")
                        .HasColumnName("CA_PRO_ID");

                    b.Property<string>("CaProEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CA_PRO_ESTADO")
                        .IsFixedLength();

                    b.Property<int?>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<int?>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("PRO_ID");

                    b.HasKey("CaProId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CaProId"), false);

                    b.HasIndex(new[] { "CatId" }, "FK_CATEGORIA_CA_PRO_FK");

                    b.HasIndex(new[] { "ProId" }, "FK_CATEGORIA_PRODUCTO_FK");

                    b.ToTable("CATEGORIA_PRODUCTO", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Categorium", b =>
                {
                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("CatDescrip")
                        .HasColumnType("text")
                        .HasColumnName("CAT_DESCRIP");

                    b.Property<string>("CatEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CAT_ESTADO")
                        .IsFixedLength();

                    b.HasKey("CatId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CatId"), false);

                    b.ToTable("CATEGORIA", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Cliente", b =>
                {
                    b.Property<int>("CliId")
                        .HasColumnType("int")
                        .HasColumnName("CLI_ID");

                    b.Property<string>("CliDireccion")
                        .HasColumnType("text")
                        .HasColumnName("CLI_DIRECCION");

                    b.Property<string>("CliEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLI_EMAIL");

                    b.Property<string>("CliEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CLI_ESTADO")
                        .IsFixedLength();

                    b.Property<string>("CliNumCelular")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CLI_NUM_CELULAR");

                    b.Property<string>("CliNumeroIden")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CLI_NUMERO_IDEN");

                    b.Property<string>("CliPApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLI_P_APELLIDO");

                    b.Property<string>("CliPNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLI_P_NOMBRE");

                    b.Property<string>("CliSApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLI_S_APELLIDO");

                    b.Property<string>("CliSNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLI_S_NOMBRE");

                    b.Property<string>("CliTelefono")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CLI_TELEFONO");

                    b.Property<string>("CliTipoIden")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("CLI_TIPO_IDEN")
                        .IsFixedLength();

                    b.HasKey("CliId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CliId"), false);

                    b.ToTable("CLIENTE", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Compra", b =>
                {
                    b.Property<int>("ComId")
                        .HasColumnType("int")
                        .HasColumnName("COM_ID");

                    b.Property<DateTime?>("ComFecIngreso")
                        .HasColumnType("datetime")
                        .HasColumnName("COM_FEC_INGRESO");

                    b.Property<double?>("ComIva")
                        .HasColumnType("float")
                        .HasColumnName("COM_IVA");

                    b.Property<double?>("ComSubtotal")
                        .HasColumnType("float")
                        .HasColumnName("COM_SUBTOTAL");

                    b.Property<double?>("ComTotal")
                        .HasColumnType("float")
                        .HasColumnName("COM_TOTAL");

                    b.HasKey("ComId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ComId"), false);

                    b.ToTable("COMPRA", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Factura", b =>
                {
                    b.Property<int>("FacId")
                        .HasColumnType("int")
                        .HasColumnName("FAC_ID");

                    b.Property<int?>("CliId")
                        .HasColumnType("int")
                        .HasColumnName("CLI_ID");

                    b.Property<double?>("FacDescuen")
                        .HasColumnType("float")
                        .HasColumnName("FAC_DESCUEN");

                    b.Property<string>("FacEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FAC_ESTADO")
                        .IsFixedLength();

                    b.Property<DateTime?>("FacFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("FAC_FECHA");

                    b.Property<double?>("FacIva")
                        .HasColumnType("float")
                        .HasColumnName("FAC_IVA");

                    b.Property<double?>("FacSubtotal")
                        .HasColumnType("float")
                        .HasColumnName("FAC_SUBTOTAL");

                    b.Property<double?>("FacTotal")
                        .HasColumnType("float")
                        .HasColumnName("FAC_TOTAL");

                    b.Property<int>("UsuId")
                        .HasColumnType("int")
                        .HasColumnName("USU_ID");

                    b.HasKey("FacId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("FacId"), false);

                    b.HasIndex(new[] { "CliId" }, "FK_CLIENTE_FACTURA_FK");

                    b.HasIndex(new[] { "UsuId" }, "FK_USUARIO_FACTURA_FK");

                    b.ToTable("FACTURA", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.FacturaDetalle", b =>
                {
                    b.Property<int>("FadId")
                        .HasColumnType("int")
                        .HasColumnName("FAD_ID");

                    b.Property<int>("FacId")
                        .HasColumnType("int")
                        .HasColumnName("FAC_ID");

                    b.Property<int?>("FadCantidad")
                        .HasColumnType("int")
                        .HasColumnName("FAD_CANTIDAD");

                    b.Property<double?>("FadDescuento")
                        .HasColumnType("float")
                        .HasColumnName("FAD_DESCUENTO");

                    b.Property<string>("FadEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FAD_ESTADO")
                        .IsFixedLength();

                    b.Property<DateTime?>("FadFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("FAD_FECHA");

                    b.Property<double?>("FadIva")
                        .HasColumnType("float")
                        .HasColumnName("FAD_IVA");

                    b.Property<string>("FadNumeracion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FAD_NUMERACION");

                    b.Property<double?>("FadPrecioUnit")
                        .HasColumnType("float")
                        .HasColumnName("FAD_PRECIO_UNIT");

                    b.Property<double?>("FadSubtotal")
                        .HasColumnType("float")
                        .HasColumnName("FAD_SUBTOTAL");

                    b.Property<double?>("FadTotal")
                        .HasColumnType("float")
                        .HasColumnName("FAD_TOTAL");

                    b.HasKey("FadId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("FadId"), false);

                    b.HasIndex(new[] { "FacId" }, "FK_DETALLEFACTURA_FACTURA_FK");

                    b.ToTable("FACTURA_DETALLE", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Kardex", b =>
                {
                    b.Property<int>("KarId")
                        .HasColumnType("int")
                        .HasColumnName("KAR_ID");

                    b.Property<int?>("ComId")
                        .HasColumnType("int")
                        .HasColumnName("COM_ID");

                    b.Property<int?>("FacId")
                        .HasColumnType("int")
                        .HasColumnName("FAC_ID");

                    b.Property<int?>("KarBalCantidad")
                        .HasColumnType("int")
                        .HasColumnName("KAR_BAL_CANTIDAD");

                    b.Property<double?>("KarBalPrecio")
                        .HasColumnType("float")
                        .HasColumnName("KAR_BAL_PRECIO");

                    b.Property<double?>("KarBalPrecioTotal")
                        .HasColumnType("float")
                        .HasColumnName("KAR_BAL_PRECIO_TOTAL");

                    b.Property<string>("KarDetalle")
                        .HasColumnType("text")
                        .HasColumnName("KAR_DETALLE");

                    b.Property<int?>("KarEntCantidad")
                        .HasColumnType("int")
                        .HasColumnName("KAR_ENT_CANTIDAD");

                    b.Property<double?>("KarEntPreTotal")
                        .HasColumnType("float")
                        .HasColumnName("KAR_ENT_PRE_TOTAL");

                    b.Property<string>("KarEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("KAR_ESTADO")
                        .IsFixedLength();

                    b.Property<DateTime?>("KarFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("KAR_FECHA");

                    b.Property<int?>("KarSalCantidad")
                        .HasColumnType("int")
                        .HasColumnName("KAR_SAL_CANTIDAD");

                    b.Property<double?>("KarSalPreTotal")
                        .HasColumnType("float")
                        .HasColumnName("KAR_SAL_PRE_TOTAL");

                    b.Property<int?>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("PRO_ID");

                    b.HasKey("KarId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("KarId"), false);

                    b.HasIndex(new[] { "ComId" }, "FK_COMPRA_KARDEX_FK");

                    b.HasIndex(new[] { "FacId" }, "FK_FACTURA_KARDEX_FK");

                    b.HasIndex(new[] { "ProId" }, "FK_PRODUCTO_KARDEX_FK");

                    b.ToTable("KARDEX", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Parametrosg", b =>
                {
                    b.Property<int>("ParId")
                        .HasColumnType("int")
                        .HasColumnName("PAR_ID");

                    b.Property<string>("ParDescrip")
                        .HasColumnType("text")
                        .HasColumnName("PAR_DESCRIP");

                    b.Property<string>("ParEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PAR_ESTADO")
                        .IsFixedLength();

                    b.Property<string>("ParValor")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("PAR_VALOR");

                    b.HasKey("ParId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ParId"), false);

                    b.ToTable("PARAMETROSG", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Permiso", b =>
                {
                    b.Property<int>("PerId")
                        .HasColumnType("int")
                        .HasColumnName("PER_ID");

                    b.Property<string>("PerEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PER_ESTADO")
                        .IsFixedLength();

                    b.Property<string>("PerPantalla")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PER_PANTALLA");

                    b.Property<int?>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    b.HasKey("PerId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PerId"), false);

                    b.HasIndex(new[] { "RolId" }, "FK_ROL_PERMISOS_FK");

                    b.ToTable("PERMISOS", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Producto", b =>
                {
                    b.Property<int>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("PRO_ID");

                    b.Property<int?>("ComId")
                        .HasColumnType("int")
                        .HasColumnName("COM_ID");

                    b.Property<string>("ProCategoria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRO_CATEGORIA");

                    b.Property<string>("ProCodBarras")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PRO_COD_BARRAS");

                    b.Property<float?>("ProDescuento")
                        .HasColumnType("real")
                        .HasColumnName("PRO_DESCUENTO");

                    b.Property<string>("ProDetalle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PRO_DETALLE");

                    b.Property<int?>("ProEstIva")
                        .HasColumnType("int")
                        .HasColumnName("PRO_EST_IVA");

                    b.Property<string>("ProEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRO_ESTADO")
                        .IsFixedLength();

                    b.Property<string>("ProMarca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRO_MARCA");

                    b.Property<string>("ProNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRO_NOMBRE");

                    b.Property<double?>("ProPrecio")
                        .HasColumnType("float")
                        .HasColumnName("PRO_PRECIO");

                    b.HasKey("ProId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProId"), false);

                    b.HasIndex(new[] { "ComId" }, "FK_PRODUCTO_COMPRA_FK");

                    b.ToTable("PRODUCTO", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    b.Property<string>("RolDescrip")
                        .HasColumnType("text")
                        .HasColumnName("ROL_DESCRIP");

                    b.Property<string>("RolEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ROL_ESTADO")
                        .IsFixedLength();

                    b.HasKey("RolId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RolId"), false);

                    b.ToTable("ROL", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Usuario", b =>
                {
                    b.Property<int>("UsuId")
                        .HasColumnType("int")
                        .HasColumnName("USU_ID");

                    b.Property<string>("UsuContrasena")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_CONTRASENA");

                    b.Property<string>("UsuDireccion")
                        .HasColumnType("text")
                        .HasColumnName("USU_DIRECCION");

                    b.Property<string>("UsuEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_EMAIL");

                    b.Property<string>("UsuEstCivil")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("USU_EST_CIVIL")
                        .IsFixedLength();

                    b.Property<string>("UsuEstado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USU_ESTADO")
                        .IsFixedLength();

                    b.Property<DateTime?>("UsuFecNacimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("USU_FEC_NACIMIENTO");

                    b.Property<int?>("UsuNumCargas")
                        .HasColumnType("int")
                        .HasColumnName("USU_NUM_CARGAS");

                    b.Property<string>("UsuNumCelular")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("USU_NUM_CELULAR");

                    b.Property<string>("UsuNumeroIden")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("USU_NUMERO_IDEN");

                    b.Property<string>("UsuPApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_P_APELLIDO");

                    b.Property<string>("UsuPNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_P_NOMBRE");

                    b.Property<string>("UsuSApellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_S_APELLIDO");

                    b.Property<string>("UsuSNombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USU_S_NOMBRE");

                    b.Property<string>("UsuTelefono")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("USU_TELEFONO");

                    b.Property<string>("UsuTipoIden")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("USU_TIPO_IDEN")
                        .IsFixedLength();

                    b.HasKey("UsuId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("UsuId"), false);

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("FkProductoDetallefactura", b =>
                {
                    b.Property<int>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("PRO_ID");

                    b.Property<int>("FadId")
                        .HasColumnType("int")
                        .HasColumnName("FAD_ID");

                    b.HasKey("ProId", "FadId");

                    b.HasIndex(new[] { "FadId" }, "FK_PRODUCTO_DETALLEFACTURA2_FK");

                    b.HasIndex(new[] { "ProId" }, "FK_PRODUCTO_DETALLEFACTURA_FK");

                    b.ToTable("FK_PRODUCTO_DETALLEFACTURA", (string)null);
                });

            modelBuilder.Entity("FkRolUsuario", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    b.Property<int>("UsuId")
                        .HasColumnType("int")
                        .HasColumnName("USU_ID");

                    b.HasKey("RolId", "UsuId");

                    b.HasIndex(new[] { "UsuId" }, "FK_ROL_USUARIO2_FK");

                    b.HasIndex(new[] { "RolId" }, "FK_ROL_USUARIO_FK");

                    b.ToTable("FK_ROL_USUARIO", (string)null);
                });

            modelBuilder.Entity("FkUsuarioCaja", b =>
                {
                    b.Property<int>("UsuId")
                        .HasColumnType("int")
                        .HasColumnName("USU_ID");

                    b.Property<int>("CajId")
                        .HasColumnType("int")
                        .HasColumnName("CAJ_ID");

                    b.HasKey("UsuId", "CajId");

                    b.HasIndex(new[] { "CajId" }, "FK_USUARIO_CAJA2_FK");

                    b.HasIndex(new[] { "UsuId" }, "FK_USUARIO_CAJA_FK");

                    b.ToTable("FK_USUARIO_CAJA", (string)null);
                });

            modelBuilder.Entity("API_Punto_Venta.Models.CategoriaProducto", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Categorium", "Cat")
                        .WithMany("CategoriaProductos")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_CATEGORI_FK_CATEGO_CATEGORI");

                    b.HasOne("API_Punto_Venta.Models.Producto", "Pro")
                        .WithMany("CategoriaProductos")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK_CATEGORI_FK_CATEGO_PRODUCTO");

                    b.Navigation("Cat");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Factura", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Cliente", "Cli")
                        .WithMany("Facturas")
                        .HasForeignKey("CliId")
                        .HasConstraintName("FK_FACTURA_FK_CLIENT_CLIENTE");

                    b.HasOne("API_Punto_Venta.Models.Usuario", "Usu")
                        .WithMany("Facturas")
                        .HasForeignKey("UsuId")
                        .IsRequired()
                        .HasConstraintName("FK_FACTURA_FK_USUARI_USUARIO");

                    b.Navigation("Cli");

                    b.Navigation("Usu");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.FacturaDetalle", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Factura", "Fac")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("FacId")
                        .IsRequired()
                        .HasConstraintName("FK_FACTURA__FK_DETALL_FACTURA");

                    b.Navigation("Fac");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Kardex", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Compra", "Com")
                        .WithMany("Kardices")
                        .HasForeignKey("ComId")
                        .HasConstraintName("FK_KARDEX_FK_COMPRA_COMPRA");

                    b.HasOne("API_Punto_Venta.Models.Factura", "Fac")
                        .WithMany("Kardices")
                        .HasForeignKey("FacId")
                        .HasConstraintName("FK_KARDEX_FK_FACTUR_FACTURA");

                    b.HasOne("API_Punto_Venta.Models.Producto", "Pro")
                        .WithMany("Kardices")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK_KARDEX_FK_PRODUC_PRODUCTO");

                    b.Navigation("Com");

                    b.Navigation("Fac");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Permiso", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Rol", "Rol")
                        .WithMany("Permisos")
                        .HasForeignKey("RolId")
                        .HasConstraintName("FK_PERMISOS_FK_ROL_PE_ROL");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Producto", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Compra", "Com")
                        .WithMany("Productos")
                        .HasForeignKey("ComId")
                        .HasConstraintName("FK_PRODUCTO_FK_PRODUC_COMPRA");

                    b.Navigation("Com");
                });

            modelBuilder.Entity("FkProductoDetallefactura", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.FacturaDetalle", null)
                        .WithMany()
                        .HasForeignKey("FadId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_PRODU_FK_PRODUC_FACTURA_");

                    b.HasOne("API_Punto_Venta.Models.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_PRODU_FK_PRODUC_PRODUCTO");
                });

            modelBuilder.Entity("FkRolUsuario", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_ROL_U_FK_ROL_US_ROL");

                    b.HasOne("API_Punto_Venta.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_ROL_U_FK_ROL_US_USUARIO");
                });

            modelBuilder.Entity("FkUsuarioCaja", b =>
                {
                    b.HasOne("API_Punto_Venta.Models.Caja", null)
                        .WithMany()
                        .HasForeignKey("CajId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_USUAR_FK_USUARI_CAJA");

                    b.HasOne("API_Punto_Venta.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuId")
                        .IsRequired()
                        .HasConstraintName("FK_FK_USUAR_FK_USUARI_USUARIO");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Categorium", b =>
                {
                    b.Navigation("CategoriaProductos");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Cliente", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Compra", b =>
                {
                    b.Navigation("Kardices");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Factura", b =>
                {
                    b.Navigation("FacturaDetalles");

                    b.Navigation("Kardices");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Producto", b =>
                {
                    b.Navigation("CategoriaProductos");

                    b.Navigation("Kardices");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Rol", b =>
                {
                    b.Navigation("Permisos");
                });

            modelBuilder.Entity("API_Punto_Venta.Models.Usuario", b =>
                {
                    b.Navigation("Facturas");
                });
#pragma warning restore 612, 618
        }
    }
}
